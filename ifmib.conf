input {
	snmp {
		tables => [{
			"name" => "interfaces"
			"columns" => [
				"1.3.6.1.2.1.2.2.1.1", #index
				"1.3.6.1.2.1.2.2.1.2", #ifdecr
				"1.3.6.1.2.1.2.2.1.3", #ifType
				"1.3.6.1.2.1.2.2.1.5", #ifSpeed
				"1.3.6.1.2.1.2.2.1.6", #ifPhyAddress (aka, MAC)
				"1.3.6.1.2.1.2.2.1.7", #ifAdminStatus
				"1.3.6.1.2.1.2.2.1.8", #ifOperStatus
				"1.3.6.1.2.1.2.2.1.9", #ifLastChange
				"1.3.6.1.2.1.2.2.1.10", #ifInOctets
				"1.3.6.1.2.1.2.2.1.11", #ifInUcastPkts
				# deprecated "1.3.6.1.2.1.2.2.1.12", #ifInNUcastPkts
				"1.3.6.1.2.1.2.2.1.13", #ifInDiscards
				"1.3.6.1.2.1.2.2.1.14", #ifInErrors
				"1.3.6.1.2.1.2.2.1.15", #ifInUnknownProtos
				"1.3.6.1.2.1.2.2.1.16", #ifOutOctets
				"1.3.6.1.2.1.2.2.1.17", #IfOutUcastPkts
				# Deprecated "1.3.6.1.2.1.2.2.1.18", #IfOutNUcastPkts
				"1.3.6.1.2.1.2.2.1.19", #ifOutDiscards
				"1.3.6.1.2.1.2.2.1.20" #ifOutErrors
			]
		}]
	hosts => [{
		host => "udp:192.168.1.1/161"
		community => "public"	#change to your RO community string
		version => "2c"
		retries => 2
		timeout => 1000
	}]
	interval => 60		# in seconds
	}
}

filter {
	split {
		field => "interfaces"
	}

	mutate {
		rename => { "[interfaces][index]" => "index" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifIndex]" => "ifIndex" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifDescr]" => "ifDescr" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifType]" => "ifType" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifSpeed]" => "ifSpeed" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifPhysAddress]" => "ifPhyAddress" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifAdminStatus]" => "ifAdminStatus" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifOperStatus]" => "ifOperStatus" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifLastChange]" => "ifLastChange" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifInOctets]" => "ifInOctets" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifInUcastPkts]" => "ifInUcastPkts" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifInDiscards]" => "ifInDiscards" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifInErrors]" => "ifInErrors" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifInUnknownProtos]" => "ifInUnknownProtos" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifOutOctets]" => "ifOutOctets" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifOutUcastPkts]" => "ifOutUcastPkts" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifOutDiscards]" => "ifOutDiscards" }
		rename => { "[interfaces][iso.org.dod.internet.mgmt.mib-2.interfaces.ifTable.ifEntry.ifOutErrors]" => "ifOutErrors" }
	}

	mutate {
		convert => {
			"ifInOctets"     => "integer"
			"ifInUcastPkts"  => "integer"
			"ifInDiscards"   => "integer"
			"ifInErrors"     => "integer"
			"ifOutOctets"    => "integer"
			"ifOutUcastPkts" => "integer"
			"ifOutDiscards"  => "integer"
			"ifOutErrors"    => "integer"
		}
	}

	translate {
		field => "ifAdminStatus"
		destination => "ifAdminStatusDescr"
		dictionary  => {
			"1" => "1 - Up"
			"2" => "2 - Down"
			"3" => "3 - Testing"
		}
	}

	translate {
		field => "ifOperStatus"
		destination => "ifOperStatusDescr"
		dictionary  => {
			"1" => "1 - Up"
			"2" => "2 - Down"
			"3" => "3 - Testing"
			"4" => "4 - Unknown"
			"5" => "5 - Dormant"
			"6" => "6 - (hw) not present"
		}
	}
}

output {
	#stdout {}
	elasticsearch {
		hosts    => ["https://myaws.es.us-east-1.aws.found.io:443"]
		user     => "elastic"
		password => "${ES_PWD}"	#using /usr/share/logstash/bin/logstash-keystore
		data_stream         => "true"
		data_stream_type    => "metrics"
		data_stream_dataset => "ifmib"
	}
}
